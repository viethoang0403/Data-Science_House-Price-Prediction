# -*- coding: utf-8 -*-
"""data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NCRMAPhxbAOa4svITIcmNIozJYlH3oQ1
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

"""Đọc dữ liệu từ file "inf.csv" và lưu kết quả vào DataFrame df_info."""

df_info = pd.read_csv('./inf.csv')
df_info = df_info.set_index('Id').sort_index()
df_info

"""Kiểm tra xem trong tập có dòng nào bị trùng không. Nếu trùng thì trả về True, không thì là False"""

num_duplicated_rows = df_info.duplicated().sum()
is_duplicated = (num_duplicated_rows != 0)
print('So dong lap la {}'.format(num_duplicated_rows))
print(is_duplicated)

"""Xóa các dòng trùng lặp, giữ lại dòng gần nhất"""

df_info = df_info.drop_duplicates()
num_duplicated_rows = df_info.duplicated().sum()
print('So dong lap la {}'.format(num_duplicated_rows))

"""Kiểm tra dạng dữ liệu của các cột để xem có đúng với dạng mong muốn không."""

df_info.dtypes

"""- Square: loại bỏ đơn vị m^2 và chuyển sang dạng số"""

df_info["Square"] =df_info["Square"].str.replace('m²','')
df_info["Square"] = pd.to_numeric(df_info["Square"],errors='coerce')
df_info.rename(columns={'Square':'Square(m²)'},inplace=True)
df_info['Square(m²)']

"""
- Price: Xem cụ thể hơn các giá trị để có thể xử lý chính xác

"""

df_info["Price"].unique()

"""Thấy có các dạng đơn vị là Triệu/tháng, Nghìn/tháng, Triệu/m2/tháng, Nghìn/m2/tháng, và có thêm một kiểu giá trị là Thỏa thuận.
Cần chuyển toàn bộ đơn vị sang Triệu/tháng và loại bỏ đơn vị ở sau để tiện chuyển thành số, riêng giá trị Thỏa thuận thì để là NaN
"""

def convert_price(price,square):
    if 'Triệu/tháng' in price:
        price = price.replace('Triệu/tháng','')
        return float(price)
    if 'Trăm nghìn/tháng' in price:
        price = price.replace('Nghìn/tháng','')
        return float(price)/1000
    if 'Triệu/m2/tháng' in price:
        if pd.isna(square):
            return np.nan
        price = price.replace('Triệu/m2/tháng','')
        return float(price)*square
    if 'Nghìn/m2/tháng' in price:
        if pd.isna(square):
            return np.nan
        price = price.replace('Nghìn/m2/tháng','')
        price = float(price)/1000
        return price*square
    return np.nan

df_price_square = df_info[['Price','Square(m²)']]

# Thực hiện chuyển đổi
for i in df_price_square.index:
    df_price_square.at[i,'Price'] = convert_price(df_price_square.loc[i]['Price'],df_price_square.loc[i]['Square(m²)'])

# Lưu vào dataframe
df_info['Price'] =  pd.to_numeric(df_price_square['Price'])
df_info.rename(columns={'Price':'Price(Triệu/tháng)'},inplace=True)

df_info["Price(Triệu/tháng)"]

"""Date: Biểu diễn ngày tháng năm nhưng lại không có dạng dữ liệu là datetime mà là object"""

df_info["Date"] = pd.to_datetime(df_info["Date"],format = "%d/%m/%Y",errors = 'raise')

df_info["Date"]

"""Xử lý dữ liệu NaN:

Vì đây là những thuộc tính khá khó để suy hay đoán và có rất ít dữ liệu nên khi drop nó đi cũng không ảnh hưởng khi xây dựng model sau này.
"""

df_info.isnull().sum()

df_info.dropna(inplace=True)

"""Ouliers

Biểu đồ boxplot để tìm outliers của giá và diện tích
"""

for col in ['Price(Triệu/tháng)','Square(m²)']:
    plt.figure(figsize=(10, 10))
    sns.boxenplot(y=col,data=df_info)
    plt.title('Outliers in {}'.format(col))
    plt.show()

"""Giá có outliers có giá trị trên 100, ta sẽ in những dòng này xem thử"""

outliers_price = df_info[df_info['Price(Triệu/tháng)'] > 100]
outliers_price

"""Thấy giá có outliers có giá trị trên 100 có thể là do người đăng tải thông tin đã nhầm đơn vị nên ta sẽ tiền hành giảm về con số đúng.
Giá đúng của những con số này là khoảng dưới 10.
"""

for i in range(len(outliers_price['Price(Triệu/tháng)'])):
    while(outliers_price['Price(Triệu/tháng)'].iloc[i] >= 10):
        outliers_price['Price(Triệu/tháng)'].iloc[i] /= 10

outliers_price

"""Cập nhập vào df chính"""

df_info.loc[outliers_price.index,'Price(Triệu/tháng)'] = outliers_price['Price(Triệu/tháng)']

"""Còn những điểm trên 50, tiếp tục in ra để xử lý"""

outliers_price = df_info[df_info['Price(Triệu/tháng)'] > 50]
outliers_price

"""Thấy dòng đầu tiên là bán, dòng tiếp là cho thuê cả căn hộ, còn dòng cuối người đăng cũng đã nhập sai giá trị thực nên ta chủ động loại bỏ hết những dòng này."""

df_info.drop(index = outliers_price.index,inplace=True)

"""Thấy giá có outliers có giá trị trên 150 sẽ rơi vào những trường hợp như kí túc xá, hay cho thuê 1 phòng đơn nhưng đăng diện tích cả nhà hoặc đăng sai giá trị thực nên ta cũng loại hết những dòng này."""

outliers_square = df_info[df_info['Square(m²)'] > 150]


df_info.drop(index = outliers_square.index,inplace=True)

"""Biểu đồ boxplot để tìm outliers của giá và diện tích sau khi đã xử lý"""

for col in ['Price(Triệu/tháng)','Square(m²)']:
    plt.figure(figsize=(10, 10))
    sns.boxenplot(y=col,data=df_info)
    plt.title('Outliers in {}'.format(col))
    plt.show()

"""Outliers ở giá nằm ở mức gần 10 triệu, ở diện tích nằm ở mức gần 80 và nằm dưới 10, ta sẽ loại những giá trị này để tránh ảnh hưởng

"""

outliers_price = df_info[df_info['Price(Triệu/tháng)'] > 10]
df_info.drop(index = outliers_price.index,inplace=True)

outliers_square = df_info[(df_info['Square(m²)']) > 80]
df_info.drop(index = outliers_square.index,inplace=True)
outliers_square = df_info[(df_info['Square(m²)'] < 10)]
df_info.drop(index = outliers_square.index,inplace=True)

for col in ['Price(Triệu/tháng)','Square(m²)']:
    plt.figure(figsize=(10, 10))
    sns.boxenplot(y=col,data=df_info)
    plt.title('Outliers in {}'.format(col))
    plt.show()

"""Sắp xếp theo ngày cập nhật gần nhất và lưu df lại vào file clean_data"""

df_info = df_info.sort_values(by='Date', ascending=False)
df_info.to_csv('clean_data.csv')

"""**TRỰC QUAN HÓA DỮ LIỆU**"""

from datetime import date
from datetime import datetime

"""Ta nhận thấy rằng các cột có thể tính toán sự phân bố đó là Price(Triệu/tháng), Square(m²).

Ta sẽ tính các giá trị:

Giá trị min
Giá trị lower quartile (phân vị 25)
Giá trị median (phân vị 50)
Giá trị upper quartile (phân vị 75)
Giá trị max
"""

num_col_info_df = pd.DataFrame([],index= [ "min", "lower_quartile", "median", "upper_quartile", "max","mean" ])
col = ['Price(Triệu/tháng)','Square(m²)']

for i in col:
    distribu = np.nanpercentile(df_info[i],(0,25,50,75,100)) #tinh min,lower,median,upper,max
    mean = df_info[i].mean()
    data = np.append(distribu,mean)
    num_col_info_df[i] = data.round(1)
num_col_info_df

"""Với các cột không phải dạng số: Title, District, City, ta sẽ tính:

Tỉ lệ % (từ 0 đến 100) các giá trị thiếu
Số lượng giá trị khác nhau
Giá trị xuất hiện nhiều nhất
Giá trị xuẩt hiện ít nhất

"""

col = ['Title','District','City']
ob_col_info_df = pd.DataFrame([],index = ['missing ratio','num diff value','Most appear','Min appear'])

for i in col:
    missing = np.array(df_info[i].isna().sum()*100/len(df_info)) #tinh phan tram gia tri thieu
    diff_value = len(df_info[i].dropna().unique())
    count_value = df_info[i].dropna().value_counts()
    most_ap = count_value[0]
    least_ap = count_value[-1]
    ob_col_info_df[i] = [missing,diff_value,most_ap,least_ap]
ob_col_info_df

"""Ta sẽ vẽ một vài biểu đồ để xem xét rõ hơn sự phân bố"""

#Hàm vẽ
def draw_chart(df_col,til,x_name,y_name,typechart = 0):
    #Tính tần số và sắp xếp giảm dần
    data_num = df_col.value_counts()

    #Kiểm tra xem có phải là dạng barh không
    if typechart==1:
        plt.barh(data_num.index,data_num.values,height= 0.5)
    else:
        plt.bar(data_num.index,data_num.values)

    plt.title(til)
    plt.xlabel(x_name)
    plt.ylabel(y_name)
    plt.show()

draw_chart(df_info["District"],"Thống kê số lượng nhà theo Quận","Số nhà","Quận",1)

df_info.head()

count_price = df_info["Price(Triệu/tháng)"].value_counts()
count_price = count_price.sort_index()

plt.plot(count_price.index,count_price.values)
plt.xlabel('Mức giá')
plt.ylabel('Số lượng')
plt.show()

"""Ta thấy dữ liệu tập trung chủ yếu từ 0 đến 10 triệu, vậy ta sẽ lấy dữ liệu khoảng này để vẽ rõ hơn ( vẽ bằng bar chart )"""

price_10 = df_info[df_info["Price(Triệu/tháng)"]<10]["Price(Triệu/tháng)"]
price_list_range = np.arange(0,11,1)

range_price_10 = pd.cut(price_10,bins = price_list_range)

count_price_10 = range_price_10.value_counts().sort_index()
count_price_10 = count_price_10.reset_index()
count_price_10.columns = ["Range","So luong"]
count_price_10["Range"] = count_price_10["Range"].astype(str)

plt.subplots(figsize = (14,5))
plt.bar(count_price_10["Range"],count_price_10["So luong"])
plt.xlabel('Khoảng giá')
plt.ylabel('Số lượng nhà')
plt.tight_layout()
plt.show()

"""\Ta cũng vẽ đồ thị biểu diễn số lượng nhà theo diện tích"""

a = df_info["Square(m²)"].dropna()
b = pd.cut(a.values,bins=10)

c = b.value_counts().sort_index()
c = c.reset_index()
c.columns = ["Range","So luong"]
c["Range"] = c["Range"].astype(str)
plt.subplots(figsize = (14,5))
plt.bar(c["Range"],c["So luong"])
plt.xlabel('Khoảng diện tích')
plt.ylabel('Số lượng nhà')
plt.tight_layout()
plt.show()

"""Dữ liệu tập trung nhiều ở khoảng dưới 65, vậy ta sẽ dùng dữ liệu khoảng này để vẽ lại rõ hơn"""

square150 =  df_info[df_info["Square(m²)"] <= 65]["Square(m²)"]
range_square150 = pd.cut(square150,bins = 10)

count_square150 = range_square150.value_counts().sort_index()
count_square150 = count_square150.reset_index()
count_square150.columns = ["Range","So luong"]
count_square150["Range"] = count_square150["Range"].astype(str)
plt.subplots(figsize = (14,5))
plt.bar(count_square150["Range"],count_square150["So luong"])
plt.xlabel('Khoảng diện tích')
plt.ylabel('Số lượng nhà')
plt.tight_layout()
plt.show()

"""Để xem mối liên hệ giữa diện tích và giá nhà ta sẽ dùng đồ thị scatterplot"""

df_data = df_info[["Price(Triệu/tháng)","Square(m²)"]]
sns.scatterplot(df_data,x = df_data["Price(Triệu/tháng)"],y = df_data["Square(m²)"])
plt.show()

df_data = df_info[["Price(Triệu/tháng)","Square(m²)"]]
df_price_square = df_data[df_data["Price(Triệu/tháng)"] < 15]
sns.scatterplot(df_price_square,x = df_price_square["Price(Triệu/tháng)"],y = df_price_square["Square(m²)"])
plt.show()

"""Ta sẽ thống kê số nhà theo năm và tháng"""

year = df_info['Date'].array[:].year
df_year = pd.Series(year)
num_year = df_year.value_counts()
plt.bar(num_year.index,num_year.values)
plt.xlabel('Năm')
plt.ylabel('Số lượng bài đăng')
plt.show()

month = df_info['Date'].array[:].month
df_month = pd.Series(month)
num_month = df_month.value_counts()
plt.bar(num_month.index,num_month.values)
plt.xlabel('Tháng')
plt.ylabel('Số lượng bài đăng')
plt.show()

df_info.to_csv('clean_data.csv')